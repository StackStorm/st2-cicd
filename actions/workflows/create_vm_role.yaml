version: '2.0'

st2cd.create_vm_role:
    description: Create VM with specific role in AWS
    type: direct
    input:
        - instance_type
        - environment
        - key_name
        - keyfile
        - hostname
        - dns_zone
        - role
        - creator
        - purpose
        - distro

    vars:
        ec2_instance_id: null

    output:
        vm_info: <% task(run_instance).result.result[0] %>

    task-defaults:
        on-error:
            - destroy_vm_on_failure: <% $.ec2_instance_id != null %>
            - fail: <% $.ec2_instance_id = null %>

    tasks:
        get_subnet_id:
            action: st2.kv.get
            input:
                key: <% $.environment %>_subnet
            on-success:
                - get_ami

        get_ami:
            action: st2.kv.get
            input:
                key: ami_<% $.distro %>
            on-success:
                - check_cname

        check_cname:
            action: aws.r53_zone_get_cname
            input:
                name: <% $.hostname %>.<% $.dns_zone %>
                zone: <% $.dns_zone %>
            on-success:
                - run_instance: <% task(check_cname).result.result[0] = null %>
                - fail: <% task(check_cname).result.result[0] != null %>

        run_instance:
            action: aws.ec2_run_instances
            input:
                image_id: <% task(get_ami).result.result %>
                instance_type: <% $.instance_type %>
                subnet_id: <% task(get_subnet_id).result.result %>
                key_name: <% $.key_name %>
            publish:
                ec2_instance_id: <% task(run_instance).result.result[0].id %>
                ec2_instance_private_ip: <% task(run_instance).result.result[0].private_ip_address %>
                ec2_instance_private_dns: <% task(run_instance).result.result[0].private_dns_name %>
            on-success:
                - wait_for_instance

        wait_for_instance:
            action: aws.ec2_wait_for_state
            input:
                instance_id: <% $.ec2_instance_id %>
                state: running
            on-success:
                - wait_for_ssh

        wait_for_ssh:
            action: linux.wait_for_ssh
            input:
                hostname: <% $.ec2_instance_private_ip %>
                username: stanley
                keyfile: <% $.keyfile %>
                ssh_timeout: 20
                retries: 30
            on-success:
                - add_tags

        add_tags:
            action: aws.ec2_create_tags
            input:
                resource_ids: <% $.ec2_instance_id %>
                tags: Name=<% $.hostname %>,Creator=<% $.creator %>,Role=<% $.role %>,Purpose=<% switch(isEmpty($.purpose) => "No Description", $.purpose => $.purpose) %>
            on-success:
                - add_cname

        add_cname:
            action: aws.r53_zone_add_cname
            input:
                name: <% $.hostname %>.<% $.dns_zone %>
                value: <% $.ec2_instance_private_dns %>
                zone: <% $.dns_zone %>
            publish:
                cname: <% $.hostname %>.<% $.dns_zone %>
            on-success:
                - get_distro

        get_distro:
            action: st2cd.get_distro
            input:
                hosts: <% $.ec2_instance_private_ip %>
            on-success:
                - set_hostname

        set_hostname:
            action: st2cd.set_hostname
            input:
                hosts: <% $.ec2_instance_private_ip %>
                hostname: <% $.cname %>
                distro: <% task(get_distro).result.get($.ec2_instance_private_ip).stdout %>
                timeout: 300
            on-success:
                - reboot

        reboot:
            action: core.remote_sudo
            input:
                hosts: <% $.ec2_instance_private_ip %>
                cmd: shutdown -r +1 &
            on-success:
                - wait_for_ssh_post_reboot

        wait_for_ssh_post_reboot:
            action: linux.wait_for_ssh
            input:
                hostname: <% $.ec2_instance_private_ip %>
                username: stanley
                keyfile: <% $.keyfile %>
                ssh_timeout: 30
                retries: 10
            on-success:
                - puppet_bootstrap

        puppet_bootstrap:
            action: st2cd.puppet_bootstrap
            input:
                hosts: <% $.ec2_instance_private_ip %>
                role: <% $.role %>



        destroy_vm_on_failure:
            action: st2cd.destroy_vm
            input:
                hostname: <% $.hostname %>
                instance_id: <% $.ec2_instance_id %>
            on-complete:
                - fail
