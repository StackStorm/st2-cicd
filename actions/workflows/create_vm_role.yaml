---
version: '1.0'
description: Create VM with specific role in AWS
input:
  - instance_type
  - environment
  - key_name
  - keyfile
  - hostname
  - dns_zone
  - role
  - creator
  - purpose
  - distro
vars:
  - check_cname_count: 0
  - ec2_instance_id:
  - vm_info:
      id:
      private_ip_address:
      private_dns_name:
output:
  - vm_info:
      id: <% ctx(ec2_instance_id) %>
      private_ip_address: <% ctx(ec2_instance_private_ip) %>
      private_dns_name: <% ctx(ec2_instance_private_dns) %>
tasks:
  get_subnet_id:
    action: st2.kv.get
    input:
      key: <% ctx().environment %>_subnet
    next:
      - when: <% succeeded() %>
        do:
          - get_ami
  get_ami:
    action: st2.kv.get
    input:
      key: ami_<% ctx().distro %>
    next:
      - when: <% succeeded() %>
        do:
          - check_cname
  check_cname:
    action: aws.r53_zone_get_cname
    input:
      name: <% ctx().hostname %>.<% ctx().dns_zone %>
      zone: <% ctx().dns_zone %>
    next:
      - when: <% succeeded() and (result().result[0] = null) %>
        do:
          - run_instance
      - when: <% succeeded() and (result().result[0] != null) and ctx().check_cname_count < 10 %>
        publish:
          - check_cname_count: <% ctx().check_cname_count + 1 %>
        do:
          - remove_cname
      - when: <% failed() or ctx().check_cname_count > 10 %>
        do:
          - destroy_vm_on_failure
  remove_cname:
    action: aws.r53_zone_delete_cname
    input:
      name: <% ctx().hostname %>.<% ctx().dns_zone %>
      zone: <% ctx().dns_zone %>
    next:
      - do:
          - check_cname
  run_instance:
    action: aws.ec2_run_instances
    input:
      ImageId: <% task(get_ami).result.result %>
      InstanceType: <% ctx().instance_type %>
      SubnetId: <% task(get_subnet_id).result.result %>
      KeyName: <% ctx().key_name %>
      MaxCount: 1
      MinCount: 1
    next:
      - when: <% succeeded() %>
        publish:
          - vm_info: <% result().result[0].Instances[0] %>
          - ec2_instance_id: <% ctx(vm_info).InstanceId %>
          - ec2_instance_private_ip: <% ctx(vm_info).PrivateIpAddress %>
          - ec2_instance_private_dns: <% ctx(vm_info).PrivateDnsName %>
        do:
          - wait_for_instance
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  wait_for_instance:
    action: aws.ec2_wait_for_state
    input:
      instance_id: <% ctx().ec2_instance_id %>
      state: running
    next:
      - when: <% succeeded() %>
        do:
          - wait_for_ssh
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  wait_for_ssh:
    action: linux.wait_for_ssh
    input:
      hostname: <% ctx().ec2_instance_private_ip %>
      username: stanley
      keyfile: <% ctx().keyfile %>
      ssh_timeout: 20
      retries: 30
    next:
      - when: <% succeeded() %>
        do:
          - add_tags
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  add_tags:
    action: aws.ec2_create_tags
    input:
      Resources:
        - <% ctx().ec2_instance_id %>
      Tags:
        - Key: Name
          Value: <% ctx().hostname %>
        - Key: Creator
          Value: <% ctx().creator %>
        - Key: Role
          Value: <% ctx().role %>
        - Key: Purpose
          Value: <% switch(isEmpty(ctx().purpose) => "No Description", ctx().purpose => ctx().purpose) %>
    next:
      - when: <% succeeded() %>
        do:
          - add_cname
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  add_cname:
    action: aws.r53_zone_add_cname
    input:
      name: <% ctx().hostname %>.<% ctx().dns_zone %>
      value: <% ctx().ec2_instance_private_dns %>
      zone: <% ctx().dns_zone %>
    next:
      - when: <% succeeded() %>
        publish:
          - cname: <% ctx().hostname %>.<% ctx().dns_zone %>
        do:
          - get_distro
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  get_distro:
    action: st2cd.get_distro
    input:
      hosts: <% ctx().ec2_instance_private_ip %>
    next:
      - when: <% succeeded() %>
        do:
          - set_hostname
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  set_hostname:
    action: st2cd.set_hostname
    input:
      hosts: <% ctx().ec2_instance_private_ip %>
      hostname: <% ctx().cname %>
      distro: <% task(get_distro).result.get(ctx().ec2_instance_private_ip).stdout %>
      timeout: 300
    next:
      - when: <% succeeded() %>
        do:
          - reboot
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  reboot:
    action: core.remote_sudo
    input:
      hosts: <% ctx().ec2_instance_private_ip %>
      cmd: shutdown -r +1 &
    next:
      - when: <% succeeded() %>
        do:
          - wait_for_ssh_post_reboot
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  wait_for_ssh_post_reboot:
    action: linux.wait_for_ssh
    input:
      hostname: <% ctx().ec2_instance_private_ip %>
      username: stanley
      keyfile: <% ctx().keyfile %>
      ssh_timeout: 30
      retries: 10
    next:
      - when: <% succeeded() %>
        do:
          - check_hostname_post_reboot
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  check_hostname_post_reboot:
    action: core.remote_sudo
    input:
      hosts: <% ctx().ec2_instance_private_ip %>
      cmd: "cat /etc/hostname ; echo ''; hostname ; echo ''; cat /etc/hosts"
    next:
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure

  destroy_vm_on_failure:
    next:
      - when: <% ctx().ec2_instance_id != null %>
        do:
          - destroy
      - when: <% ctx().ec2_instance_id = null %>
        do:
          - fail
  destroy:
    action: st2cd.destroy_vm
    input:
      hostname: <% ctx().hostname %>
      instance_id: <% ctx().ec2_instance_id %>
    next:
      - do:
          - fail
