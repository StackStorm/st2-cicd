---
version: '1.0'
description: Create a Windows VM in AWS
input:
  - instance_type
  - environment
  - key_name
  - private_key
  - dns_zone
  - hostname
  - username
  - role
  - creator
  - purpose
  - distro
vars:
  - check_cname_count: 0
  - ec2_instance_password: ""
  - ec2_instance_id:
  - ec2_instance_user_data: "<powershell>\n#Setup for TLS v1.2\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12;\n# download the script\n(New-Object System.Net.WebClient).DownloadFile('https://raw.githubusercontent.com/ansible/ansible/stable-2.12/examples/scripts/ConfigureRemotingForAnsible.ps1', './ConfigureRemotingForAnsible.ps1')\n# execute the script\n./ConfigureRemotingForAnsible.ps1\n</powershell>"
  - vm_info:
      id:
      private_ip_address:
      private_dns_name:
output:
  - vm_info:
      id: <% ctx(ec2_instance_id) %>
      private_ip_address: <% ctx(ec2_instance_private_ip) %>
      private_dns_name: <% ctx(ec2_instance_private_dns) %>
  - vm_username: <% ctx().username %>
  - vm_password: <% ctx().ec2_instance_password %>
tasks:
  get_subnet_id:
    action: st2.kv.get
    input:
      key: <% ctx().environment %>_subnet
    next:
      - when: <% succeeded() %>
        do:
          - get_ami
  get_ami:
    action: st2.kv.get
    input:
      key: ami_<% ctx().distro %>
    next:
      - when: <% succeeded() %>
        do:
          - check_cname
  check_cname:
    action: aws.r53_zone_get_cname
    input:
      name: <% ctx().hostname %>.<% ctx().dns_zone %>
      zone: <% ctx().dns_zone %>
    next:
      - when: <% succeeded() and (result().result[0] = null) %>
        do:
          - run_instance
      - when: <% succeeded() and (result().result[0] != null) and (ctx().check_cname_count < 10) %>
        publish:
          - check_cname_count: <% ctx().check_cname_count + 1 %>
        do:
          - remove_cname
      - when: <% failed() %>
        do:
          - fail
  remove_cname:
    action: aws.r53_zone_delete_cname
    input:
      name: <% ctx().hostname %>.<% ctx().dns_zone %>
      zone: <% ctx().dns_zone %>
    next:
      - do:
          - check_cname
  run_instance:
    action: aws.ec2_run_instances
    input:
      ImageId: <% task(get_ami).result.result %>
      InstanceType: <% ctx().instance_type %>
      SubnetId: <% task(get_subnet_id).result.result %>
      KeyName: <% ctx().key_name %>
      UserData: <% ctx().ec2_instance_user_data %>
      MaxCount: 1
      MinCount: 1
    next:
      - when: <% succeeded() %>
        publish:
          - vm_info: <% result().result[0].Instances[0] %>
          - ec2_instance_id: <% ctx(vm_info).InstanceId %>
          - ec2_instance_private_ip: <% ctx(vm_info).PrivateIpAddress %>
          - ec2_instance_private_dns: <% ctx(vm_info).PrivateDnsName %>
        do:
          - wait_for_instance
  wait_for_instance:
    action: aws.ec2_wait_for_state
    input:
      instance_id: <% ctx().ec2_instance_id %>
      state: running
    next:
      - when: <% succeeded() %>
        do:
          - wait_for_password_data
  wait_for_password_data:
    # Note: AWS EC2 says it may take up to 15 minutes for password data to become
    # available
    retry:
      delay: 60
      when: <% (failed() or result().result[0]["PasswordData"].isEmpty()) %>
      count: 15
    action: aws.ec2_get_password_data
    input:
      InstanceId: <% ctx().ec2_instance_id %>
    next:
      - when: <% succeeded() and not result().result[0]["PasswordData"].isEmpty() %>
        publish:
          - ec2_instance_password_data: <% result().result[0]["PasswordData"] %>
        do:
          - decrypt_password_data
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  decrypt_password_data:
    action: st2cd.aws_decrypt_password_data
    input:
      private_key: <% ctx().private_key %>
      password_data: <% ctx().ec2_instance_password_data %>
    next:
      - when: <% succeeded() %>
        publish:
          - ec2_instance_password: <% result().result %>
        do:
          - wait_for_winrm
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  wait_for_winrm:
    retry:
      delay: 60
      count: 5
    action: windows.wait_for_winrm
    input:
      host: <% ctx().ec2_instance_private_ip %>
      username: <% ctx().username %>
      password: <% ctx().ec2_instance_password %>
      verify_ssl_cert: false
      winrm_timeout: 10
      retries: 10
      timeout: 120
    next:
      - when: <% succeeded() %>
        do:
          - add_tags
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  add_tags:
    action: aws.ec2_create_tags
    input:
      Resources:
        - <% ctx().ec2_instance_id %>
      Tags:
        - Key: Name
          Value: <% ctx().hostname %>
        - Key: Creator
          Value: <% ctx().creator %>
        - Key: Role
          Value: <% ctx().role %>
        - Key: Purpose
          Value: <% switch(isEmpty(ctx().purpose) => "No Description", ctx().purpose => ctx().purpose) %>
    next:
      - when: <% succeeded() %>
        do:
          - add_cname
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure
  add_cname:
    action: aws.r53_zone_add_cname
    input:
      name: <% ctx().hostname %>.<% ctx().dns_zone %>
      value: <% ctx().ec2_instance_private_dns %>
      zone: <% ctx().dns_zone %>
    next:
      - when: <% succeeded() %>
        publish:
          - cname: <% ctx().hostname %>.<% ctx().dns_zone %>
      - when: <% failed() %>
        do:
          - destroy_vm_on_failure

  destroy_vm_on_failure:
    action: st2cd.destroy_vm
    input:
      hostname: <% ctx().hostname %>
      instance_id: <% ctx().ec2_instance_id %>
    next:
      - do:
          - fail
