version: '2.0'
name: st2cd.mistral_release_candidate
description: Run the pipeline to release candidate for Mistral.

workflows:

    main:
        type: direct
        input:
            - version
            - test_host
            - build_host
            - mis_repo_main
            - mis_repo_client
            - mis_repo_action
            - mis_repo_branch
            - mis_repo_dir
            - st2_repo_branch
            - debug
        task-defaults:
            on-error:
                - notify_on_failure
        tasks:
            get_hosts:
                workflow: get_build_hosts
                input:
                    hosts: <% dict(test=>$.test_host, build=>$.build_host) %>
                publish:
                    hosts: <% $.get_hosts.hosts %>
                on-success:
                    - release
            release:
                action: st2cd.mistral_branch_candidate
                input:
                    host: <% $.hosts.get(build) %>
                    version: <% $.version %>
                    repo_main: <% $.mis_repo_main %>
                    repo_client: <% $.mis_repo_client %>
                    repo_action: <% $.mis_repo_action %>
                    repo_branch: <% $.mis_repo_branch %>
                    repo_dir: <% $.mis_repo_dir %>
                    requirements: <% $.deps %>
                on-success:
                    - notify
            notify:
                action: slack.post_message
                input:
                    channel: '#stackstorm'
                    message: '```[MISTRAL-CD] Release candidate <% $.version %> is available.```'
            notify_on_failure:
                action: slack.post_message
                input:
                    channel: '#stackstorm'
                    message: '```[MISTRAL-CD] Error releasing candidate <% $.version %>.```'
                on-complete:
                    - fail


    get_host:
        type: direct
        input:
            - host
            - type
        output:
            host: <% $.host %>
        tasks:
            has_host:
                action: std.noop
                on-success:
                    - get_host: <% $.host = null or $.host = '' or $.host = 'None' %>
                    - succeed: <% $.host != null and $.host != '' and $.host != 'None' %>
            get_host:
                action: linux.dig
                input:
                    hostname: <% $.type %>
                    rand: true
                    count: 1
                publish:
                    host: <% $.get_host.result[0] %>


    get_build_hosts:
        type: direct
        input:
            - hosts
        output:
            hosts: <% $.hosts %>
        tasks:
            get_test_host:
                workflow: get_host
                input:
                    host: <% $.hosts.get(test) %>
                    type: st2-build-slave-itests-ubuntu.service.consul
                on-success:
                    - get_build_host
            get_build_host:
                workflow: get_host
                input:
                    host: <% $.hosts.get(build) %>
                    type: st2-build-slave-ubuntu.service.consul
                on-success:
                    - compose_hosts
            compose_hosts:
                action: std.noop
                publish:
                    hosts: <% dict(test=>$.get_test_host.host,
                                   build=>$.get_build_host.host) %>
