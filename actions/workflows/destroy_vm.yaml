version: '2.0'

st2cd.destroy_vm:
    description: Destroy VM and associated resources
    type: direct
    input:
        - hostname
        - dns_zone
        - instance_id
        - used_dns: False
        - used_id: False
    vars:
        volume_to_delete_iteration_count: 0
    tasks:
        get_instance_dns:
            action: linux.dig
            input:
                hostname: <% $.hostname %>.<% $.dns_zone %>
                count: 1
            on-success:
                - get_instances_by_dns: <% len(task(get_instance_dns).result.result) > 0 %>
                - get_instances_by_id: <% len(task(get_instance_dns).result.result) <= 0 and $.instance_id != null %>
                - noop: <% len(task(get_instance_dns).result.result) <= 0 and $.instance_id = null %>
        get_instances_by_dns:
            action: aws.ec2_get_only_instances
            publish:
                used_dns: True
                instances: <%
                        task(get_instances_by_dns).result.result.where(
                            $.private_dns_name + '.' = task(get_instance_dns).result.result[0] or
                            $.private_ip_address = task(get_instance_dns).result.result[0]
                        ).select($.id)
                    %>
            on-success:
                - get_volumes: <% len($.instances) = 1 %>
                - notify_multiple_instances_failure: <% len($.instances) > 1 and $.instance_id = null %>
                - noop: <% len($.instances) < 1 and $.instance_id = null %>
                - get_instances_by_id: <% len($.instances) != 1 and $.instance_id != null %>
        get_instances_by_id:
            action: aws.ec2_get_only_instances
            publish:
                used_dns: False
                used_id: True
                instances: <%
                    task(get_instances_by_id).result.result.where(
                        $.id = execution().input.instance_id).select($.id)
                    %>
            on-success:
                - get_volumes: <% len($.instances) = 1 %>
                - notify_multiple_instances_failure: <% len($.instances) > 1 %>
                - noop: <% len($.instances) < 1 %>

        get_volumes:
            action: aws.ec2_get_instance_attribute
            input:
                attribute: blockDeviceMapping
                instance_id: <% $.instances[0] %>
            publish:
                volumes: <%
                    task(get_volumes).result.result.first().get(
                        blockDeviceMapping, {}).values().where(
                            not $.get(delete_on_termination, True)).select($.volume_id) %>
            on-error:
                - notify_destroy_instance_failure
            on-success:
                - destroy_instance
        destroy_instance:
            action: aws.ec2_terminate_instances
            input:
                instance_ids: <% $.instances[0] %>
            on-error:
                - notify_destroy_instance_failure
            on-success:
                # Give the instance time to terminate and volume(s) to be detached.
                - wait_for_instance_to_terminate
        wait_for_instance_to_terminate:
            action: core.local
            input:
                cmd: sleep 60
                timeout: 120
            on-success:
                - delete_cname
        delete_cname:
            action: aws.r53_zone_delete_cname
            input:
                zone: <% $.dns_zone %>
                name: <% $.hostname %>.<% $.dns_zone %> 
            on-error:
                - notify_delete_cname_failure
            on-complete:
                - delete_volumes
        delete_volumes:
            with-items: volume in <% $.volumes %>
            action: aws.ec2_delete_volume
            input:
                volume_id: <% $.volume %>
            publish-on-error:
                volume_to_delete_iteration_count: <% $.volume_to_delete_iteration_count + 1 %>
            on-error:
                - notify_delete_volumes_failure: <% $.volume_to_delete_iteration_count >= 10 %>
                # The instance may still be terminating and volumes are attached.
                - wait_for_volume_to_delete: <% $.volume_to_delete_iteration_count < 10 %>
            on-success:
                - notify_success

        wait_for_volume_to_delete:
            action: core.local
            input:
                cmd: sleep 60
            on-success:
                - delete_volumes

        notify_success:
            action: slack.post_message
            input:
                channel: "#thunderdome"
                message: "[SUCCEEDED] <% $.hostname %> was destroyed"

        notify_multiple_instances_failure:
            action: slack.post_message
            input:
                channel: "#opstown"
                message: "[FAILED] More than one instance for <% $.hostname %> were identified"
            on-complete:
                - fail

        notify_destroy_instance_failure:
            action: slack.post_message
            input:
                channel: "#opstown"
                message: "[FAILED] <% $.hostname %> was not destroyed"
            on-complete:
                - fail

        notify_delete_cname_failure:
            action: slack.post_message
            input:
                channel: "#opstown"
                message: "[FAILED] <% $.hostname %> was destroyed but CNAME was not deleted"

        notify_delete_volumes_failure:
            action: slack.post_message
            input:
                channel: "#opstown"
                message: "[FAILED] <% $.hostname %> was destroyed but volumes were not deleted"
            on-complete:
                - fail
