---
version: '1.0'
description: Destroy VM and associated resources
input:
  - hostname
  - dns_zone
  - instance_id
  - used_dns: false
  - used_id: false
vars:
  - notify_channel: '#thunderdome'
  - notify_failure_channel: '#opstown'
tasks:
  get_instance_dns:
    action: linux.dig
    input:
      hostname: <% ctx().hostname %>.<% ctx().dns_zone %>
      count: 1
    next:
      - when: <% succeeded() and (len(result().result) > 0) %>
        do:
          - get_instances_by_dns
      - when: <% succeeded() and (len(result().result) <= 0 and ctx().instance_id != null) %>
        do:
          - get_instances_by_id
      - when: <% succeeded() and (len(result().result) <= 0 and ctx().instance_id = null) %>
        do:
          - noop
  get_instances_by_dns:
    action: aws.ec2_get_only_instances
    next:
      - publish:
          - instances: <%
              result().result.where(
                $.private_dns_name + '.' = task(get_instance_dns).result.result[0] or
                $.private_ip_address = task(get_instance_dns).result.result[0]
              ).select($.id) %>
        do:
          - switch_on_dns
  switch_on_dns:
    action: core.noop
    next:
      - when: <% succeeded() and (len(ctx().instances) = 1) %>
        publish:
          - used_dns: true
        do:
          - get_volumes
      - when: <% succeeded() and (len(ctx().instances) > 1 and ctx().instance_id = null) %>
        do:
          - notify_multiple_instances_failure
      - when: <% succeeded() and (len(ctx().instances) < 1 and ctx().instance_id = null) %>
        do:
          - noop
      - when: <% succeeded() and (len(ctx().instances) != 1 and ctx().instance_id != null) %>
        do:
          - get_instances_by_id
  get_instances_by_id:
    action: aws.ec2_get_only_instances
    next:
      - publish:
          - instances: <% result().result.where($.id = ctx().instance_id).select($.id) %>
        do:
          - switch_on_id
  switch_on_id:
    action: core.noop
    next:
      - when: <% succeeded() and (len(ctx().instances) = 1) %>
        publish:
          - used_id: true
        do:
          - get_volumes
      - when: <% succeeded() and (len(ctx().instances) > 1) %>
        do:
          - notify_multiple_instances_failure
      - when: <% succeeded() and (len(ctx().instances) < 1) %>
        do:
          - noop
  get_volumes:
    action: aws.ec2_get_instance_attribute
    input:
      attribute: blockDeviceMapping
      instance_id: <% ctx().instances[0] %>
    next:
      - when: <% succeeded() %>
        publish:
          - volumes: <% result().result.first().get(blockDeviceMapping, {}).values().where(not $.get(delete_on_termination, True)).select($.volume_id) %>
        do:
          - destroy_instance
      - when: <% failed() %>
        do:
          - notify_destroy_instance_failure
  destroy_instance:
    action: aws.ec2_terminate_instances
    input:
      InstanceIds:
        - <% ctx().instances[0] %>
    next:
      - when: <% succeeded() %>
        do:
          - wait_for_instance_to_terminate
      - when: <% failed() %>
        do:
          - notify_destroy_instance_failure
  wait_for_instance_to_terminate:
    action: core.local
    input:
      cmd: sleep 60
      timeout: 120
    next:
      - when: <% succeeded() %>
        do:
          - delete_cname
  delete_cname:
    action: aws.r53_zone_delete_cname
    input:
      zone: <% ctx().dns_zone %>
      name: <% ctx().hostname %>.<% ctx().dns_zone %>
    next:
      - when: <% len(ctx().volumes) = 0 %>
        do:
          - notify_success
      - when: <% len(ctx().volumes) > 0 %>
        do:
          - delete_volumes
      - when: <% failed() %>
        do:
          - notify_delete_cname_failure
          - delete_volumes
  delete_volumes:
    retry:
      delay: 120
      count: 10
    with: volume in <% ctx().volumes %>
    action: aws.ec2_delete_volume
    input:
      VolumeId: <% item(volume) %>
    next:
      - when: <% succeeded() %>
        do:
          - notify_success
      - when: <% failed() %>
        do:
          - notify_delete_volumes_failure

  notify_success:
    action: slack.chat.postMessage
    input:
      channel: <% ctx().notify_channel %>
      text: '[SUCCEEDED] <% ctx().hostname %> was destroyed'

  notify_multiple_instances_failure:
    action: slack.chat.postMessage
    input:
      channel: <% ctx().notify_failure_channel %>
      text: '[FAILED] More than one instance for <% ctx().hostname %> were identified'
    next:
      - do:
          - fail

  notify_destroy_instance_failure:
    action: slack.chat.postMessage
    input:
      channel: <% ctx().notify_failure_channel %>
      text: '[FAILED] <% ctx().hostname %> was not destroyed'
    next:
      - do:
          - fail

  notify_delete_cname_failure:
    action: slack.chat.postMessage
    input:
      channel: <% ctx().notify_failure_channel %>
      text: '[FAILED] <% ctx().hostname %> was destroyed but CNAME was not deleted'

  notify_delete_volumes_failure:
    action: slack.chat.postMessage
    input:
      channel: <% ctx().notify_failure_channel %>
      text: '[FAILED] <% ctx().hostname %> was destroyed but volumes were not deleted'
    next:
      - do:
          - fail
