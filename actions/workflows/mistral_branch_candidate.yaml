---
version: '1.0'
description: Create a new release candidate for Mistral.
input:
  - host
  - version
  - repo_main
  - repo_client
  - repo_action
  - repo_branch
  - repo_dir
  - requirements
  - debug
tasks:
  init:
    action: core.noop
    next:
      - when: <% ctx().host = null or str(ctx().host).toLower() = "none" or str(ctx().host.toLower()) = "null" %>
        do:
          - get_host
      - when: <% ctx().host != null and str(ctx().host).toLower() != "none" and str(ctx().host.toLower()) != "null" %>
        do:
          - clone_repos
  get_host:
    action: linux.dig
    input:
      hostname: st2-build-slave-ubuntu.service.consul
      rand: true
      count: 1
    next:
      - when: <% succeeded() %>
        publish:
          - host: <% result().result[0] %>
        do:
          - clone_repos
  clone_repos:
    with:
      items: proj, repo in <% zip(list(mistral, mistralclient, st2mistral),
                                  list(ctx().repo_main,
                                       ctx().repo_client,
                                       ctx().repo_action)) %>
    action: st2cd.git_clone
    input:
      hosts: <% ctx().host %>
      repo: <% item(repo) %>
      branch: <% ctx().repo_branch %>
      target: <% ctx().repo_dir %>/<% item(proj) %>_<% ctx().repo_branch %>
    next:
      - when: <% succeeded() %>
        publish:
          - clone_paths: <% dict(mistral => result()[0].get(ctx().host).stdout,
                                 mistralclient => result()[1].get(ctx().host).stdout,
                                 st2mistral => result()[2].get(ctx().host).stdout) %>
        do:
          - create_branch
      - when: <% failed() %>
        publish:
          - clone_paths: <% dict(mistral => result()[0].get(ctx().host).stdout,
                                 mistralclient => result()[1].get(ctx().host).stdout,
                                 st2mistral => result()[2].get(ctx().host).stdout) %>
        do:
          - remove_repos
          - fail
  create_branch:
    action: st2cd.mistral_create_branch
    input:
      hosts: <% ctx().host %>
      version: <% ctx().version %>
      repo_main: <% ctx().clone_paths.get(mistral) %>
      repo_client: <% ctx().clone_paths.get(mistralclient) %>
      repo_action: <% ctx().clone_paths.get(st2mistral) %>
      requirements: <% ctx().requirements %>
    next:
      - do:
          - remove_repos
  remove_repos:
    with:
      items: repo in <% list(ctx().clone_paths.get(mistral),
                             ctx().clone_paths.get(mistralclient),
                             ctx().clone_paths.get(st2mistral)) %>
    action: st2cd.git_clean
    input:
      hosts: <% ctx().host %>
      repo: <% item(repo) %>
